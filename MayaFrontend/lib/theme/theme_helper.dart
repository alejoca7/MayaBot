import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:mayatraductor/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(14),
          ),
          shadowColor: colorScheme.primaryContainer,
          elevation: 7,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.indigo50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.indigo100,
          fontSize: 16.fSize,
          fontFamily: 'Hind Siliguri',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.indigo100.withOpacity(0.64),
          fontSize: 12.fSize,
          fontFamily: 'Hind Siliguri',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: Color(0XFF7B2CBF),
          fontSize: 36.fSize,
          fontFamily: 'Hind Siliguri',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: Color(0XFF5B67CA),
          fontSize: 32.fSize,
          fontFamily: 'Hind Siliguri',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 24.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.indigo90001,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: Color(0XFF2C406E),
          fontSize: 14.fSize,
          fontFamily: 'Hind Siliguri',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF7B2CBF),
    primaryContainer: Color(0XFFF1F6FF),

    // Error colors
    onError: Color(0XFF5A189A),

    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0X72AE0909),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray800A2 => Color(0XA22C406E);

  // DeepPurplec
  Color get deepPurple5000c => Color(0X0C6750A4);

  // Gray
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFFA6A6A6);
  Color get gray50001 => Color(0XFFA3A4A5);
  Color get gray50002 => Color(0XFFA4A4A6);
  Color get gray900 => Color(0XFF1E1E1E);

  // Green
  Color get greenA200 => Color(0XFF43EE7D);

  // Indigo
  Color get indigo100 => Color(0XFFC6CEDD);
  Color get indigo400 => Color(0XFF5B67CA);
  Color get indigo50 => Color(0XFFE3E8F1);
  Color get indigo900 => Color(0XFF10275A);
  Color get indigo90001 => Color(0XFF003366);

  // Pink
  Color get pink300 => Color(0XFFFD7694);

  // Purplef
  Color get purple9007f => Color(0X7F3C096C);

  // Red
  Color get red500 => Color(0XFFEB4335);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
